heap-:
 heap is a complete binary tree
 heap can be two types

max heap , min heap

max heap-:  parent element will always greater then internal element


Time Complexity of building a heap
following algorithm for building a Heap of an input array A.

BUILD-HEAP(A) 
    heapsize := size(A); 
    for i := floor(heapsize/2) downto 1 
        do HEAPIFY(A, i); 
    end for 
END
A quick look over the above algorithm suggests that the running time is O(nlg(n)), since each call to Heapify costs O(lg(n)) and Build-Heap makes O(n) such calls.
This upper bound, though correct, is not asymptotically tight.

We can derive a tighter bound by observing that the running time of Heapify depends on the height of the tree ‘h’ (which is equal to lg(n), where n is number of nodes) and the heights of most sub-trees are small.
The height ’h’ increases as we move upwards along the tree. Line-3 of Build-Heap runs a loop from the index of the last internal node (heapsize/2) with height=1, to the index of root(1) with height = lg(n). Hence, Heapify takes different time for each node, which is O(h).

alogorithm  for building  heap from array -:
consition -:
 range for leaves node will be from (n/2-1)
 internal node will bde from 1 to n/2-1
 if parent is i then left child will 2i+1 and right will be 2i+2 
 we can heapify parent i only if left subtree and right subtree already heap.

example

[3 ,6,5,0,8,2,1]
   3 ,6,5,            0,8,2,1
internal nodes      leaves node 


heapify all internal nodes 
bottom up approach 


so first of all we will have to heapify all internal nodes














python

# Python3 program for building Heap from Array

# To heapify a subtree rooted with node i
# which is an index in arr[]. N is size of heap
def heapify(arr, n, i):

	largest = i; # Initialize largest as root
	l = 2 * i + 1; # left = 2*i + 1
	r = 2 * i + 2; # right = 2*i + 2

	# If left child is larger than root
	if l < n and arr[l] > arr[largest]:
		largest = l;

	# If right child is larger than largest so far
	if r < n and arr[r] > arr[largest]:
		largest = r;

	# If largest is not root
	if largest != i:
		arr[i], arr[largest] = arr[largest], arr[i];

		# Recursively heapify the affected sub-tree
		heapify(arr, n, largest);

# Function to build a Max-Heap from the given array
def buildHeap(arr, n):

	# Index of last non-leaf node
	startIdx = n // 2 - 1;

	# Perform reverse level order traversal
	# from last non-leaf node and heapify
	# each node
	for i in range(startIdx, -1, -1):
		heapify(arr, n, i);

# A utility function to print the array
# representation of Heap
def printHeap(arr, n):
	print("Array representation of Heap is:");

	for i in range(n):
		print(arr[i], end = " ");
	print();

# Driver Code
if __name__ == '__main__':
	
	# Binary Tree Representation
	# of input array
	# 1
	#		 /	 \
	# 3		 5
	#	 / \	 / \
	# 4	 6 13 10
	# / \ / \
	# 9 8 15 17
	arr = [ 1, 3, 5, 4, 6, 13,
			10, 9, 8, 15, 17 ];

	n = len(arr);

	buildHeap(arr, n);

	printHeap(arr, n);
	
	# Final Heap:
	# 17
	#		 /	 \
	# 15		 13
	#	 / \	 / \
	# 9	 6 5 10
	#	 / \ / \
	# 4 8 3 1

# This code is contributed by Princi Singh


